<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | zjutwhw 技术博客]]></title>
  <link href="http://zjutwhw.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://zjutwhw.github.io/"/>
  <updated>2016-04-19T14:46:23+08:00</updated>
  <id>http://zjutwhw.github.io/</id>
  <author>
    <name><![CDATA[zjutwhw]]></name>
    <email><![CDATA[zjutwhw@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS调试工具初探]]></title>
    <link href="http://zjutwhw.github.io/blog/2016/04/18/ios-debuger/"/>
    <updated>2016-04-18T16:47:32+08:00</updated>
    <id>http://zjutwhw.github.io/blog/2016/04/18/ios-debuger</id>
    <content type="html"><![CDATA[<p><strong>LLDB Debuger</strong></p>

<blockquote><p>LLDB是LLVM下的调试器，从Xcode5.0开始apple就开始将原来的gdb改为LLDB了，为所有的工程自动设置LLDB进行调试。本文总结下日常开发中使用到的一些LLDB命令，并如何使用Facebook开源的LLDB插件Chisel进行调试，提高我们开发过程中的开发效率。</p></blockquote>

<p><strong>LLDB 常用命令</strong></p>

<p>执行类命令集</p>

<p>参考：</p>

<ul>
<li><a href="http://lldb.llvm.org/lldb-gdb.html">The LLDB Debugger</a></li>
<li><a href="http://blog.163.com/l1_jun/blog/static/14386388201210202355254/">LLDB &amp; GDB 内置命令对比</a></li>
<li><a href="http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan/">LLDB调试命令初探</a></li>
<li><a href="https://blog.cnbluebox.com/blog/2015/03/05/chisel/">Chisel-LLDB命令插件，让调试更Easy</a></li>
<li><a href="https://github.com/facebook/chisel">Chisel</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Touch 框架（一）]]></title>
    <link href="http://zjutwhw.github.io/blog/2016/03/10/iOS-CocoaTouch/"/>
    <updated>2016-03-10T10:03:22+08:00</updated>
    <id>http://zjutwhw.github.io/blog/2016/03/10/iOS-CocoaTouch</id>
    <content type="html"><![CDATA[<blockquote><p>Cocoa Touch中众多框架中最重要最基本的两个框架是：<code>Foundation</code> 和 <code>UIKit</code>,其中<code>Foundation</code>与界面无关，包含一些最基本的类，而<code>UIKit</code>主要包含与界面相关的基础类。</p></blockquote>

<p><img src="/images/cocoa_frame.jpg" alt="Cocoa框架" /></p>

<!--more-->


<hr />

<p><strong>Foundation框架</strong></p>

<p><em>&lt;图中灰色的是iOS不支持的，灰色部分是OS X系统的></em></p>

<p><img src="/images/cocoa_foundation.png" alt="" /></p>

<p>Foundation类组织架构可以按逻辑分类成如下：</p>

<ul>
<li>值对象</li>
<li>集合</li>
<li>操作系统服务

<ul>
<li>文件系统</li>
<li>URL</li>
<li>进程间通讯</li>
</ul>
</li>
<li>通知</li>
<li>归档和序列化</li>
<li>表达式和条件判断</li>
<li>Objective-C语言服务</li>
</ul>


<p><strong>UIKit框架</strong></p>

<p><img src="/images/cocoa_uikit.jpg" alt="" /></p>

<p>其中UIResponder是UIKit中非常重要的一个基类，也是图中最大的分支的根类，UIResponder为Cocoa Touch框架定义了事件响应链，UIKit生成事件通过UIResponder响应链来找到处理事件的对象。其中UIApplication，UIWindow，UIViewController，UIView都是继承至UIResponder，都有可能成为处理事件的对象。</p>

<p><strong>动态语言Object-C</strong></p>

<p>Object-C是一门动态语言，相比其他语言(Java,C,C++)，它的动态特性主要表现如下三点：</p>

<ul>
<li>动态类：运行时确定类的对象</li>
<li>动态绑定：运行时确定要调用的方法</li>
<li>动态加载：运行时为程序加载新的模块</li>
</ul>

]]></content>
  </entry>
  
</feed>
