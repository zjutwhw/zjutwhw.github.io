<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios多线程 | zjutwhw 技术博客]]></title>
  <link href="http://zjutwhw.github.io/blog/categories/iosduo-xian-cheng/atom.xml" rel="self"/>
  <link href="http://zjutwhw.github.io/"/>
  <updated>2016-04-13T10:11:13+08:00</updated>
  <id>http://zjutwhw.github.io/</id>
  <author>
    <name><![CDATA[zjutwhw]]></name>
    <email><![CDATA[zjutwhw@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS多线程-线程锁（一）]]></title>
    <link href="http://zjutwhw.github.io/blog/2016/04/12/thread/"/>
    <updated>2016-04-12T17:33:39+08:00</updated>
    <id>http://zjutwhw.github.io/blog/2016/04/12/thread</id>
    <content type="html"><![CDATA[<p><strong>线程安全</strong></p>

<p><strong>A.信号量来加锁</strong></p>

<ul>
<li><p>1.创建信号量，可以设置信号量的资源数。
<code>dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</code></p>

<p>  0表示没有资源，调用dispatch_semaphore_wait会立即等待;如果大于0表示有资源，不需要等待，并获取资源同时资源-1`</p></li>
<li><p>2.等待信号，可以设置超时参数。
<code>dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</code></p>

<p>  线程会一直等待信号通知，直到超时。该函数返回0表示得到通知，非0表示超时。</p></li>
<li><p>3.通知信号
<code>dispatch_semaphore_signal(semaphore);</code></p>

<p>  发出通知信号，如果等待线程被唤醒则返回非0，否则返回0。</p></li>
</ul>


<!--more-->


<ul>
<li>4.Demo ：生产 - 消费</li>
</ul>


<pre><code>dispatch_semaphore_t sem = dispatch_semaphore_create(0);
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ //消费者队列
      while (condition) {
　　　　    if (dispatch_semaphore_wait(sem, dispatch_time(DISPATCH_TIME_NOW, 10*NSEC_PER_SEC))) //等待10秒
　　　　　　continue;
　　　　//得到数据 并消费。
　　}
});

dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ //生产者队列
      while (condition) {
 　　　　if (!dispatch_semaphore_signal(sem)){
　　　　　　sleep(1); //等1秒再发通知信号，直到有等待线程被唤醒
　　　　　　continue;
　　　　}
　　　　//通知成功
　　}

});
</code></pre>

<ul>
<li>5.Demo 多线程加锁</li>
</ul>


<pre><code>dispatch_semaphore_t semaphore = dispatch_semaphore_create(1); //初始化1个资源

- (void)doTest
{
      for (NSInteger index = 0; index &lt; 10; index++)
      {
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 

                [self lock];
                // 访问公共存储区数据、同一时刻只有一个线程可以操作这些数据。
                sleep(3);
                [self unLock];
            });
      }
}

- (void)lock
{
      dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);
}
- (void)unLock
{
      dispatch_semaphore_signal(semaphore);
}
</code></pre>

<p><strong>B.dispatch组（dispatch group）</strong></p>

<ul>
<li><p>1.创建dispatch组
<code>dispatch_group_t group = dispatch_group_create();</code></p></li>
<li><p>2.启动异步block到dispatch队列中，并关联到group中</p>

<p>  dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
  dispatch_group_async(group, queue, ^{ //异步执行block });</p></li>
<li><p>3.阻塞当前线程，设置等待group关联的block执行的超时时间</p></li>
</ul>


<p><code>dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</code> 或
<code>dispatch_group_notify(group, dispatch_get_main_queue(), ^{ //执行完的回调block });</code> //设置等待group关联的block执行完的回调的block</p>

<ul>
<li><p>4.手动管理关联group的block的运行状态 （相当于引用计数）
<code>dispatch_group_enter(group);</code>  // 进入group +1；
<code>dispatch_group_leave(group);</code>  // 退出group -1；</p></li>
<li><p>5.Demo 以下两种方式是等价的</p></li>
</ul>


<pre><code>//1.group自动管理
dispatch_group_async(group, queue, ^{ 
}); 

//2.group手动管理
dispatch_group_enter(group);  // +1
dispatch_async(queue, ^{
　　dispatch_group_leave(group);  // -1
});

//阻塞了，直到group关联的block执行完。(想想成group计数为0时才执行)
dispatch_group_notify(group, dispatch_get_main_queue(), ^{ //执行完的回调block });
</code></pre>

<p><strong>C.<code>dispatch_barrier_async</code> （barrier：栅栏）</strong></p>

<p><code>dispatch_barrier_async</code>是在前面的任务执行结束后它才执行，而且它后面的任务等它执行完成之后才会执行</p>

<pre><code>dispatch_queue_t queue = dispatch_queue_create("abc.cde.fgh",DISPATCH_QUEUE_CONCURRENT); 
dispatch_async(queue, ^{  //第一个异步block   });  
dispatch_async(queue, ^{  //第二个异步block   });   //第一、二个异步block是同步的
dispatch_barrier_async(queue, ^{ //第三个异步block   });   //等第一和第二个异步block执行完才执行第三个block
dispatch_async(queue, ^{  //第四个异步block   });   //必须等第三个block执行完才执行第四、五、六个block
</code></pre>
]]></content>
  </entry>
  
</feed>
