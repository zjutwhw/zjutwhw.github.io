<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zjutwhw 技术博客]]></title>
  <link href="http://zjutwhw.github.io/atom.xml" rel="self"/>
  <link href="http://zjutwhw.github.io/"/>
  <updated>2016-04-18T18:30:00+08:00</updated>
  <id>http://zjutwhw.github.io/</id>
  <author>
    <name><![CDATA[zjutwhw]]></name>
    <email><![CDATA[zjutwhw@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS调试工具初探]]></title>
    <link href="http://zjutwhw.github.io/blog/2016/04/18/ios-debuger/"/>
    <updated>2016-04-18T16:47:32+08:00</updated>
    <id>http://zjutwhw.github.io/blog/2016/04/18/ios-debuger</id>
    <content type="html"><![CDATA[<p><strong>LLDB</strong></p>

<blockquote><p>LLDB是LLVM下的调试器，从Xcode5.0开始apple就开始将原来的gdb改为LLDB了，为所有的工程自动设置LLDB进行调试。本文总结下日常开发中使用到的一些LLDB命令，并如何使用Facebook开源的LLDB插件Chisel进行调试，提高我们开发过程中的开发效率。</p></blockquote>

<p>参考：</p>

<ul>
<li><a href="http://blog.163.com/l1_jun/blog/static/14386388201210202355254/">LLDB &amp; GDB 内置命令对比</a></li>
<li><a href="http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan/">LLDB调试命令初探</a></li>
<li><a href="https://blog.cnbluebox.com/blog/2015/03/05/chisel/">Chisel-LLDB命令插件，让调试更Easy</a></li>
<li><a href="https://github.com/facebook/chisel">Chisel</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS多线程-线程锁（一）]]></title>
    <link href="http://zjutwhw.github.io/blog/2016/04/12/thread/"/>
    <updated>2016-04-12T17:33:39+08:00</updated>
    <id>http://zjutwhw.github.io/blog/2016/04/12/thread</id>
    <content type="html"><![CDATA[<p><strong>线程安全</strong></p>

<p><strong>A.信号量来加锁</strong></p>

<ul>
<li><p>1.创建信号量，可以设置信号量的资源数。
<code>dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</code></p>

<p>  0表示没有资源，调用dispatch_semaphore_wait会立即等待;如果大于0表示有资源，不需要等待，并获取资源同时资源-1`</p></li>
<li><p>2.等待信号，可以设置超时参数。
<code>dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</code></p>

<p>  线程会一直等待信号通知，直到超时。该函数返回0表示得到通知，非0表示超时。</p></li>
<li><p>3.通知信号
<code>dispatch_semaphore_signal(semaphore);</code></p>

<p>  发出通知信号，如果等待线程被唤醒则返回非0，否则返回0。</p></li>
</ul>


<!--more-->


<ul>
<li>4.Demo ：生产 - 消费</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">dispatch_semaphore_t</span> <span class="n">sem</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">//消费者队列</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">　　　　</span> <span class="k">if</span> <span class="p">(</span><span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">sem</span><span class="p">,</span> <span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="mi">10</span><span class="o">*</span><span class="n">NSEC_PER_SEC</span><span class="p">)))</span> <span class="c1">//等待10秒</span>
</span><span class='line'><span class="err">　　　　　　</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="err">　　　　</span><span class="c1">//得到数据 并消费。</span>
</span><span class='line'><span class="err">　　</span><span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">//生产者队列</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="err">　　　　</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">sem</span><span class="p">)){</span>
</span><span class='line'><span class="err">　　　　　　</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//等1秒再发通知信号，直到有等待线程被唤醒</span>
</span><span class='line'><span class="err">　　　　　　</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="err">　　　　</span><span class="p">}</span>
</span><span class='line'><span class="err">　　　　</span><span class="c1">//通知成功</span>
</span><span class='line'><span class="err">　　</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>5.Demo 多线程加锁</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">dispatch_semaphore_t</span> <span class="n">semaphore</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//初始化1个资源</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>              <span class="p">[</span><span class="nb">self</span> <span class="n">lock</span><span class="p">];</span>
</span><span class='line'>              <span class="c1">// 访问公共存储区数据、同一时刻只有一个线程可以操作这些数据。</span>
</span><span class='line'>              <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>              <span class="p">[</span><span class="nb">self</span> <span class="n">unLock</span><span class="p">];</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">lock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">semaphore</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">unLock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">semaphore</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>B.dispatch组（dispatch group）</strong></p>

<ul>
<li><p>1.创建dispatch组
<code>dispatch_group_t group = dispatch_group_create();</code></p></li>
<li><p>2.启动异步block到dispatch队列中，并关联到group中</p>

<p>  dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
  dispatch_group_async(group, queue, ^{ //异步执行block });</p></li>
<li><p>3.阻塞当前线程，设置等待group关联的block执行的超时时间</p></li>
</ul>


<p><code>dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</code> 或
<code>dispatch_group_notify(group, dispatch_get_main_queue(), ^{ //执行完的回调block });</code> //设置等待group关联的block执行完的回调的block</p>

<ul>
<li><p>4.手动管理关联group的block的运行状态 （相当于引用计数）
<code>dispatch_group_enter(group);</code>  // 进入group +1；
<code>dispatch_group_leave(group);</code>  // 退出group -1；</p></li>
<li><p>5.Demo 以下两种方式是等价的</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">//1.group自动管理</span>
</span><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//2.group手动管理</span>
</span><span class='line'><span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>  <span class="c1">// +1</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'><span class="err">　　</span><span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>  <span class="c1">// -1</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//阻塞了，直到group关联的block执行完。(想想成group计数为0时才执行)</span>
</span><span class='line'><span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">//执行完的回调block });</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>C.<code>dispatch_barrier_async</code> （barrier：栅栏）</strong></p>

<p><code>dispatch_barrier_async</code>是在前面的任务执行结束后它才执行，而且它后面的任务等它执行完成之后才会执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;abc.cde.fgh&quot;</span><span class="p">,</span><span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>  <span class="c1">//第一个异步block   });  </span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>  <span class="c1">//第二个异步block   });   //第一、二个异步block是同步的</span>
</span><span class='line'><span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span> <span class="c1">//第三个异步block   });   //等第一和第二个异步block执行完才执行第三个block</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>  <span class="c1">//第四个异步block   });   //必须等第三个block执行完才执行第四、五、六个block</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用runtime减少线上Crash]]></title>
    <link href="http://zjutwhw.github.io/blog/2016/04/11/hook-crash/"/>
    <updated>2016-04-11T17:33:39+08:00</updated>
    <id>http://zjutwhw.github.io/blog/2016/04/11/hook-crash</id>
    <content type="html"><![CDATA[<h3>OC消息转发机制</h3>

<blockquote><p>小萝莉说Crash：<a href="http://bugly.qq.com/blog/?p=64">http://bugly.qq.com/blog/?p=64</a>
理解消息传递机制 ：<a href="https://www.zybuluo.com/MicroCai/note/64270">https://www.zybuluo.com/MicroCai/note/64270</a></p></blockquote>

<h4>动态绑定 &amp; 静态绑定 理解</h4>

<p>Objective-C为一门动态的语言，OC中的方法调用是利用消息传递实现的:<code>id returnValue = [someObject messageName:parameter];</code> 等同于 <code>id returnValue = objc_msgSend(someObject,@selector(messageName:),parameter);</code>
动态绑定：当进行消息传递，对象在响应消息时，是通过 SEL 在 methodlist 中查找函数指针 IMP，找到后直接通过指针调用函数。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">printHello</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, world!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">printGoodbye</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Goodbye, world!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">testStaticBinding</span><span class="p">(</span><span class="kt">int</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printHello</span><span class="p">();</span>  <span class="c1">//静态</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printGoodbye</span><span class="p">();</span> <span class="c1">//静态绑定：在编译阶段可以直接将函数名硬编码成地址，生成调用指令</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">testDynamicBbinding</span><span class="p">(</span><span class="kt">int</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">func</span> <span class="o">=</span> <span class="n">printHello</span><span class="p">;</span> <span class="c1">//动态</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">func</span> <span class="o">=</span> <span class="n">printGoodbye</span><span class="p">;</span> <span class="c1">//动态绑定：将函数调用从编译期推迟到了运行时</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>消息转发</h3>

<blockquote><p>若是找到对应函数就跳转到实现代码，若找不到，就沿着继承链往上查找，直到找到相应的实现代码为止。若最终还是没找到实现代码，说明当前对象无法响应此消息，接下来就会执行 消息转发 操作，以试图找到一个能响应此消息的对象。</p></blockquote>

<p>消息转发分为三大阶段</p>

<ul>
<li>第一阶段先征询消息接收者所属的类，看其是否能动态添加方法，以处理当前这个无法响应的 selector，这叫做 <code>动态方法解析</code>（dynamic method resolution）。如果运行期系统（runtime system） 第一阶段执行结束，接收者就无法再以动态新增方法的手段来响应消息，进入第二阶段。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  如果尚未实现的方法是实例方法，则调用此函数</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @param selector 未处理的方法</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @return 返回布尔值，表示是否能新增实例方法用以处理selector</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">resolveInstanceMethod:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span><span class="p">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  如果尚未实现的方法是类方法，则调用此函数</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @param selector 未处理的方法</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @return 返回布尔值，表示是否能新增类方法用以处理selector</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">resolveClassMethod:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法返回布尔类型，表示是否能新增一个方法来处理 selector，此方案通常用来实现 @dynamic 属性。也可使用虚代理者来处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/************** 使用 resolveInstanceMethod 实现 @dynamic 属性 **************/</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">autoDictionaryGetter</span><span class="p">(</span><span class="kt">id</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">autoDictionarySetter</span><span class="p">(</span><span class="kt">id</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">resolveInstanceMethod:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">selectorString</span> <span class="o">=</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="cm">/* selector is from a @dynamic property */</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">selectorString</span> <span class="nl">hasPrefix</span><span class="p">:</span><span class="s">@&quot;set&quot;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 添加 setter 方法</span>
</span><span class='line'>            <span class="n">class_addMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="p">(</span><span class="kt">IMP</span><span class="p">)</span><span class="n">autoDictionarySetter</span><span class="p">,</span> <span class="s">&quot;v@:@&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 添加 getter 方法</span>
</span><span class='line'>            <span class="n">class_addMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="p">(</span><span class="kt">IMP</span><span class="p">)</span><span class="n">autoDictionaryGetter</span><span class="p">,</span> <span class="s">&quot;@@:&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">resolveInstanceMethod</span><span class="p">:</span><span class="n">selector</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第二阶段看看有没有其他对象,<code>备援接收者</code>（replacement receiver）能处理此消息。如果有，运行期系统会把消息转发给那个对象，转发过程结束；如果没有，则启动完整的消息转发机制。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  此方法询问是否能将消息转给其他接收者来处理</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @param aSelector 未处理的方法</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @return 如果当前接收者能找到备援对象，就将其返回；否则返回nil；</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">forwardingTargetForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>第三阶段 <code>完整的消息转发机制</code>。运行期系统会把与消息有关的全部细节都封装到 NSInvocation 对象中，再给接收者最后一次机会，令其设法解决当前还未处理的消息。</p>

<p>  如果前面两步都无法处理消息，就会启动完整的消息转发机制。首先创建 NSInvocation 对象，把尚未处理的那条消息有关的全部细节装在里面，在触发 NSInvocation 对象时，消息派发系统（message-dispatch system）将会把消息指派给目标对象。对应的方法为</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  消息派发系统通过此方法，将消息派发给目标对象</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @param anInvocation 之前创建的NSInvocation实例对象，用于装载有关消息的所有内容</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anInvocation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://zjutwhw.github.io/images/runtimeMethod.png" alt="" /></p>

<h3>Crash拦截</h3>

<ul>
<li>利用上述OC的动态语音的特性，可以实现NSInvalidArgumentException错误问题unrecognized selector sent to instance xxxx的拦截，只需要在上述三个环节任意处处理该selector，并将对于的selector上报错误日志，则可以拦截Crash，并知道对应的Crash信息。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS几个很不错的学习网站]]></title>
    <link href="http://zjutwhw.github.io/blog/2016/04/11/iOSwebsite/"/>
    <updated>2016-04-11T15:07:13+08:00</updated>
    <id>http://zjutwhw.github.io/blog/2016/04/11/iOSwebsite</id>
    <content type="html"><![CDATA[<blockquote><p>记录一些自己觉得好的一些技术博客，没事膜拜膜拜！</p></blockquote>

<ul>
<li><a href="http://casatwy.com/">iOS架构文章</a></li>
<li><a href="https://blog.cnbluebox.com/">刘坤大神</a></li>
<li><a href="http://merowing.info/">Krzysztof Zabłocki</a></li>
<li><a href="http://petersteinberger.com/">petersteinberger</a></li>
<li><a href="http://nshipster.com/">NSHipster</a></li>
<li><a href="http://objccn.io/">Objc中国</a> &amp; <a href="https://www.objc.io/issues/">Objc.io</a></li>
<li><a href="https://shengmingzhiqing.com/blog/octopress-lean-modification-1.html/">Octopress搭建</a></li>
</ul>


<!--more-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Touch 框架（一）]]></title>
    <link href="http://zjutwhw.github.io/blog/2016/03/10/iOS-CocoaTouch/"/>
    <updated>2016-03-10T10:03:22+08:00</updated>
    <id>http://zjutwhw.github.io/blog/2016/03/10/iOS-CocoaTouch</id>
    <content type="html"><![CDATA[<blockquote><p>Cocoa Touch中众多框架中最重要最基本的两个框架是：<code>Foundation</code> 和 <code>UIKit</code>,其中<code>Foundation</code>与界面无关，包含一些最基本的类，而<code>UIKit</code>主要包含与界面相关的基础类。</p></blockquote>

<p><img src="http://zjutwhw.github.io/images/cocoa_frame.jpg" alt="Cocoa框架" /></p>

<!--more-->


<hr />

<p><strong>Foundation框架</strong></p>

<p><em>&lt;图中灰色的是iOS不支持的，灰色部分是OS X系统的></em></p>

<p><img src="http://zjutwhw.github.io/images/cocoa_foundation.png" alt="" /></p>

<p>Foundation类组织架构可以按逻辑分类成如下：</p>

<ul>
<li>值对象</li>
<li>集合</li>
<li>操作系统服务

<ul>
<li>文件系统</li>
<li>URL</li>
<li>进程间通讯</li>
</ul>
</li>
<li>通知</li>
<li>归档和序列化</li>
<li>表达式和条件判断</li>
<li>Objective-C语言服务</li>
</ul>


<p><strong>UIKit框架</strong></p>

<p><img src="http://zjutwhw.github.io/images/cocoa_uikit.jpg" alt="" /></p>

<p>其中UIResponder是UIKit中非常重要的一个基类，也是图中最大的分支的根类，UIResponder为Cocoa Touch框架定义了事件响应链，UIKit生成事件通过UIResponder响应链来找到处理事件的对象。其中UIApplication，UIWindow，UIViewController，UIView都是继承至UIResponder，都有可能成为处理事件的对象。</p>

<p><strong>动态语言Object-C</strong></p>

<p>Object-C是一门动态语言，相比其他语言(Java,C,C++)，它的动态特性主要表现如下三点：</p>

<ul>
<li>动态类：运行时确定类的对象</li>
<li>动态绑定：运行时确定要调用的方法</li>
<li>动态加载：运行时为程序加载新的模块</li>
</ul>

]]></content>
  </entry>
  
</feed>
